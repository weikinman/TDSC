webpackJsonp([0,1],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(11);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(2);
	var utiles = __webpack_require__(3);
	var Graph = __webpack_require__(4);
	var Scene = __webpack_require__(5);
	var DisplayManager = __webpack_require__(7);
	var DisplayContainer = __webpack_require__(6);
	var RenderManager = __webpack_require__(9);
	var Render = __webpack_require__(10);
	var TDSC = core;

	/**
	 * 混合类型——默认
	 * @constant
	 */
	TDSC.BLEND_NORMAL = 'source-over';
	/**
	 * 混合类型——高亮
	 * @constant
	 */
	TDSC.BLEND_LIGHTER = 'lighter';
	/**
	 * 混合类型——遮罩
	 * @constant
	 */
	TDSC.BLEND_MASK = 'destination-in';
	/**
	 * 混合类型——清除
	 * @constant
	 */
	TDSC.BLEND_CLEAR = 'destination-out';

	TDSC.Math = {
					/**
	     * π，9位精度
	     * @constant
	     */
					PI: 3.141592654,
					/**
	     * 2π，9位精度
	     * @constant
	     */
					PIM2: 6.283185307,
					/**
	     * π/2，9位精度
	     * @constant
	     */
					PID2: 1.570796327,
					/**
	     * π/4，9位精度
	     * @constant
	     */
					PID4: 0.785398163,
					/**
	     * 1角度对应弧度，9位精度
	     * @constant
	     */
					ONERAD: 0.017453292,
					/**
	     * 1弧度对应角度，9位精度
	     * @constant
	     */
					ONEANG: 57.295779513,
					/**
	     * 转为弧度
	     * @param {Number} ang 角度
	     */
					toRadian: function (ang) {
									return ang * this.ONERAD;
					},
					/**
	     * 转为角度
	     * @param {Number} rad 弧度
	     */
					toAngle: function (rad) {
									return rad * this.ONEANG;
					},
					/**
	     * 获得随机数，浮点型
	     * @param {Number} a 上限
	     * @param {Number} b 下限
	     */
					randomf: function (a, b) {
									return a + Math.random() * (b - a);
					},
					/**
	     * 获得随机数，整型
	     * @param a 上限
	     * @param b 下限
	     * @return {Number}
	     */
					randomi: function (a, b) {
									return a + Math.random() * (b - a) >> 0;
					},
					/**
	     * 对浮点数取整，四舍五入
	     * @param {Number} n 浮点数
	     */
					round: function (n) {
									return 0.5 + n >> 0;
					},
					/**
	     * 对浮点数取整，小数部分被舍弃
	     * @param {Number} n 浮点数
	     */
					floor: function (n) {
									return n | 0;
					},
					/**
	     * 计算平面两点距离
	     * @param {Number} p1x 
	     * @param {Number} p1y 
	     * @param {Number} p2x 
	     * @param {Number} p2y 
	     * @returns 两点距离值
	     */
					len2D: function (p1x, p1y, p2x, p2y) {
									return Math.sqrt((p2y - p1y) * (p2y - p1y) + (p2x - p1x) * (p2x - p1x));
					},
					/**
	     * 快速计算平面两点距离
	     * 注意：此方法会产生少量误差，可以用在精度不高，但要求速度的场景中
	     * @param {Number} dx X轴坐标差值
	     * @param {Number} dy Y轴坐标差值
	     * @returns 两点距离值
	     */
					len2Df: function (dx, dy) {
									//D-values
									dx = Math.abs(dx);
									dy = Math.abs(dy);

									var min = Math.min(dx, dy);

									return dx + dy - (min >> 1) - (min >> 2) + (min >> 4);
					},
					/**
	     * sin表，包含0到360度，共361个正玄值，可以通过SINTABLE[0-360整数角度]，直接引用
	     * @constant
	     */
					SINTABLE: function () {
									var t = new Float32Array(361);
									var r = 0.017453292;
									for (var ang = 0; ang <= 360; ang++) {
													var theta = ang * r;
													var rs = Math.sin(theta);
													t[ang] = rs;
									}
									return t;
					}(),
					/**
	     * cos表，包含0到360度，共361个余玄值，可以通过COSTABLE[0-360整数角度]，直接引用
	     * @constant
	     */
					COSTABLE: function () {
									var t = new Float32Array(361);
									var r = 0.017453292;
									for (var ang = 0; ang <= 360; ang++) {
													var theta = ang * r;
													var rs = Math.cos(theta);
													t[ang] = rs;
									}
									return t;
					}()
	};

	self.cancelAFrame = function (w) {
					return w.cancelAnimationFrame || w.webkitCancelRequestAnimationFrame || w.msCancelRequestAnimationFrame || w.mozCancelRequestAnimationFrame || w.oCancelRequestAnimationFrame || w.clearTimeout;
	}(self);
	self.requestAFrame = function (w) {
					return w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.msRequestAnimationFrame || w.mozRequestAnimationFrame || w.oRequestAnimationFrame || function (callback) {
									return w.setTimeout(function () {
													callback(Date.now());
									}, 16.7);
					};
	}(self);

	TDSC.createCanvas = function (id, w, h, parent) {
					var canvas = document.createElement("canvas");
					canvas.id = id;
					canvas.width = w;
					canvas.height = h;
					canvas.innerHTML = "not support canvas";
					if (parent) {
									parent.append(canvas);
					} else {
									document.body.appendChild(canvas);
					}
					return canvas;
	};

	TDSC.Graphise = Graph;
	TDSC.Scene = Scene;
	TDSC.DisplayManager = DisplayManager;
	TDSC.DisplayContainer = DisplayContainer;
	TDSC.RenderManager = RenderManager;
	TDSC.Render = Render;

	TDSC.Shape = function (data) {
					data = data || {};
					TDSC.DisplayContainer.call(this, data);
	};
	core.inherite(TDSC.Shape, TDSC.DisplayContainer);
	core.ext(TDSC.Shape.prototype, {
					onRender: function (g) {}
	});

	TDSC.Arc = function (data) {
					data = data || {};
					TDSC.DisplayContainer.call(this, data);
					core.ext(this, data);
	};

	core.inherite(TDSC.Arc, TDSC.DisplayContainer);
	core.ext(TDSC.Arc.prototype, {
					onRender: function (g) {
									g.beginPath();
									g.arc((this.x + this.r) / 2, (this.y + this.r) / 2, this.r, this.sr, this.er);
									g.fill();
									g.closePath();
					}
	});

	TDSC.Rect = function (data) {
					data = data || {};
					TDSC.DisplayContainer.call(this, data);
					core.ext(this, data);
	};

	core.inherite(TDSC.Rect, TDSC.DisplayContainer);
	core.ext(TDSC.Rect.prototype, {
					onRender: function (g) {
									g.beginPath();
									g.Rect(this.x, this.y, this.w, this.h);
									g.fill();
									g.closePath();
					}
	});

	window.TDSC = TDSC;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;;(function (root) {
	    "use strict";

	    var Core = new function () {
	        /**
	         * 原型继承方法，只继承原型链里的
	         * @param {[[Type]]} child  [[Description]]
	         * @param {[[Type]]} parent [[Description]]
	         */
	        this.inherite = function (child, parent) {
	            var func = function () {};
	            func.prototype = parent.prototype;
	            child.prototype = new func();
	            child.prototype.contructor = child;
	            child.prototype._super = parent;
	        };
	        this._index = 0;
	        this.ext = function (obj, attrs, deep) {
	            if (obj == undefined || attrs == undefined) {
	                throw new Error("args not null");
	            }
	            var i,
	                self = this;
	            if (deep) {
	                for (i in attrs) {
	                    var item = attrs[i];
	                    if (typeof item === "object") {
	                        obj[i] = self.ext([], item, deep);
	                    } else if (attrs.hasOwnProperty(i)) {
	                        obj[i] = item;
	                    }
	                }
	            } else {
	                for (i in attrs) {
	                    if (attrs.hasOwnProperty(i)) {
	                        obj[i] = attrs[i];
	                    }
	                }
	            }
	        };
	        this.version = "0.0.1";
	        this.module = new function () {
	            this.modules = {};
	            /**
	             * [[Description]]
	             * @param {[[Type]]} name    [[Description]]
	             * @param {[[Type]]} factory [[Description]]
	             * test install("graph",Graph);
	                    function Graph(name,value){
	                        this.name = name;
	                        this.value = value;
	                    }
	             */
	            this.install = function (name, factory) {
	                this.modules[name] = factory;
	            };
	            this.getModules = function () {
	                return this.modules;
	            };
	        }();
	    }();

	    if (typeof module === "object" && typeof module.exports === "object") {
	        module.exports = Core;
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return Core;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	})(window || this);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function (root) {
	  var slice = [].slice;

	  var SCmodule = {};
	  SCmodule.Device = new function () {
	    var userAgent = this.userAgent = self.navigator.userAgent.toLowerCase();

	    var isWindows = userAgent.indexOf('windows') > 0 ? true : false;
	    var isLinux = userAgent.indexOf('linux') > 0 ? true : false;
	    var isMacOS = userAgent.indexOf('mac os') > 0 ? true : false;
	    var isAndroid = userAgent.indexOf('android') > 0 ? true : false;
	    var isIphone = userAgent.indexOf('iphone') > 0 ? true : false;
	    var isIpad = userAgent.indexOf('ipad') > 0 ? true : false;
	    var isWphone = userAgent.indexOf('windows phone') > 0 ? true : false;

	    //移动端信息
	    /**
	     * 是否为iphone
	     * @type {boolean}
	     */
	    this.iphone = isIphone;
	    /**
	     * 是否为ipad
	     * @type {boolean}
	     */
	    this.ipad = isIpad;
	    /**
	     * 是否为ios
	     * @type {boolean}
	     */
	    this.ios = isIphone || isIpad;
	    /**
	     * 是否为android
	     * @type {boolean}
	     */
	    this.android = isAndroid;
	    /**
	     * 是否为wp
	     * @type {boolean}
	     */
	    this.wp = isWphone;
	    /**
	     * 是否移动系统
	     * @type {boolean}
	     */
	    this.mobile = this.ios || isAndroid || isWphone;

	    //pc端信息
	    /**
	     * 是否为windows
	     * @type {boolean}
	     */
	    this.windows = isWindows;
	    /**
	     * 是否为linux
	     * @type {boolean}
	     */
	    this.linux = isLinux;
	    /**
	     * 是否为mac os
	     * @type {boolean}
	     */
	    this.mac = isMacOS;

	    //浏览器信息
	    var type = {
	      Firefox: userAgent.indexOf('firefox') + 1,
	      Opera: userAgent.indexOf('opera') + 1,
	      Chrome: userAgent.indexOf('chrome') + 1,
	      Safari: userAgent.indexOf('safari') > -1 && userAgent.indexOf('chrome') < 0
	    };
	    /**
	     * 如果当前浏览器为IE，那么值为true。
	     * @type boolean
	     */
	    this.ie = /msie|trident.*rv:/.test(userAgent.toLowerCase());
	    /**
	     * 如果当前浏览器为FireFox，那么值为true。
	     * @type boolean
	     */
	    this.ff = type.Firefox ? true : false;
	    /**
	     * 如果当前浏览器为Opera，那么值为true。
	     * @type boolean
	     */
	    this.opera = type.Opera ? true : false;
	    /**
	     * 如果当前浏览器为Chrome，那么值为true。
	     * @type boolean
	     */
	    this.chrome = type.Chrome ? true : false;
	    /**
	     * 如果当前浏览器为Safari，那么值为true。
	     * @type boolean
	     */
	    this.safari = type.Safari ? true : false;
	  }();

	  if (typeof module === "object" && typeof module.exports === "object") {
	    module.exports = SCmodule;
	  } else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return SCmodule;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	})(window || this);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function () {
	    /**
	     * 基
	     */

	    function Graphics(ctx) {
	        this.ctx = ctx;

	        this.push = function () {
	            this.ctx.save();
	            return this;
	        };

	        this.pop = function () {
	            this.ctx.restore();
	            return this;
	        };

	        this.save = function () {
	            this.ctx.save();
	            return this;
	        };

	        this.restore = function () {
	            this.ctx.restore();
	            return this;
	        };

	        this.moveTo = function (x, y) {
	            this.ctx.moveTo(x, y);
	            return this;
	        };
	        this.lineTo = function (x, y) {
	            this.ctx.lineTo(x, y);
	            return this;
	        };

	        this.circle = function (x, y, r) {
	            this.ctx.arc(x, y, r, 0, 2 * Math.PI, false);
	            return this;
	        };

	        this.beginPath = function () {
	            this.ctx.beginPath();
	            return this;
	        };

	        this.closePath = function () {
	            this.ctx.closePath();
	            return this;
	        };
	        this.translate = function (x, y) {
	            this.ctx.translate(x, y);
	            return this;
	        };
	        this.blendMode = function (blendMode) {
	            if (blendMode) {
	                this.ctx.globalCompositeOperation = blendMode;
	                return this;
	            } else {
	                return this.ctx.globalCompositeOperation;
	            }
	        };

	        this.lineCap = function (str) {
	            if (str) {
	                this.ctx.lineCap = str;
	                return this;
	            } else {
	                return this.ctx.lineCap;
	            }
	        };

	        this.fillStyle = function (color) {
	            if (color) {
	                this.ctx.fillStyle = color;
	                return this;
	            } else {
	                return this.ctx.fillStyle;
	            }
	        };
	        this.storkeStyle = function (color) {
	            if (color) {
	                this.ctx.storkeStyle = color;
	                return this;
	            } else {
	                return this.ctx.storkeStyle;
	            }
	        };
	        this.opacity = function (color) {
	            if (color) {
	                this.ctx.globalAlpha = color;
	                return this;
	            } else {
	                return this.ctx.globalAlpha;
	            }
	        };

	        this.arcTo = function (x1, y1, x2, y2, r) {
	            this.ctx.arcTo(x1, y1, x2, y2, r);
	            return this;
	        };

	        this.quadraticCurveTo = function (cpx, cpy, x, y) {
	            this.ctx.quadraticCurveTo(cpx, cpy, x, y);
	            return this;
	        };

	        this.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
	            this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
	            return this;
	        };

	        this.rect = function (x, y, w, h) {
	            this.ctx.rect(x, y, w, h);
	            return this;
	        };

	        this.clearRect = function (x, y, w, h) {
	            this.ctx.clearRect(x, y, w, h);
	            return this;
	        };

	        this.stroke = function () {
	            this.ctx.stroke();
	            return this;
	        };

	        this.fill = function () {
	            this.ctx.fill();
	            return this;
	        };
	        /**
	         * 多边形
	         * @throws {TypeError} [[Description]]
	         * @param   {[[Type]]} ps [[Description]]
	         * @returns {[[Type]]} [[Description]]
	         */
	        this.polygon = function (ps) {
	            if (Object.prototype.toString.call(ps) != "[object Array]") {
	                throw new TypeError();
	            }
	            var i = 0,
	                len = ps.length - 1,
	                _ctx = this.ctx;
	            _ctx.moveTo(ps[0], ps[1]);
	            for (i = 2; i < len; i++) {
	                _ctx.lineTo(ps[i], ps[i + 1]);
	            }
	            return this;
	        };
	        /**
	         * 向当前path中添加正多边形subpath
	         * @param {Number} cx 多边形重心
	         * @param {Number} cy 多边形重心
	         * @param {int}    ec 多边形的边数，不能小于3
	         * @param {Number} r1 半径1
	         * @param {Number} r2 半径2
	         * @return this
	         */
	        this.regularPolygon = function (cx, cy, ec, r1, r2) {
	            cx = cx || 0;
	            cy = cy || 0;
	            ec = ec < 3 ? 3 : ec;
	            var M = TDSC.Math;
	            var vtx = [];
	            var step = 360 / ec;
	            for (var i = 0, j = 0; i < 360; i += step, j++) {
	                var tr = r1;
	                if (r2) {
	                    if (j % 2 !== 0) tr = r1;else {
	                        tr = r2;
	                    };
	                }

	                if (!M.COSTABLE[i]) {
	                    vtx.push(cx + tr * M.COSTABLE[Math.round(i)], cy + tr * M.SINTABLE[Math.round(i)]);
	                } else {
	                    vtx.push(cx + tr * M.COSTABLE[i], cy + tr * M.SINTABLE[i]);
	                }
	            }
	            console.log(vtx);
	            this.polygon(vtx);
	            return this;
	        };
	        /**
	         * 椭圆形
	         * @param   {[[Type]]} x [[Description]]
	         * @param   {[[Type]]} y [[Description]]
	         * @param   {[[Type]]} w [[Description]]
	         * @param   {[[Type]]} h [[Description]]
	         * @returns {[[Type]]} [[Description]]
	         */
	        this.ellipse = function (x, y, w, h) {
	            var kappa = 0.5522848;
	            var ox = w / 2 * kappa,
	                // control point offset horizontal
	            oy = h / 2 * kappa,
	                // control point offset vertical
	            xe = x + w,
	                // x-end
	            ye = y + h,
	                // y-end
	            xm = x + w / 2,
	                // x-middle
	            ym = y + h / 2; // y-middle
	            var c = this.ctx;
	            //c.rect(x,y,w,h)
	            c.moveTo(x, ym);
	            //c.lineTo(x, ym - oy)
	            //c.arc(x,ym,10,0,2*Math.PI,false);

	            c.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	            c.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
	            c.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	            c.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
	            return this;
	        };
	        /**
	         * 圆角矩形
	         * @param   {[[Type]]} x [[Description]]
	         * @param   {[[Type]]} y [[Description]]
	         * @param   {[[Type]]} w [[Description]]
	         * @param   {object}   h [[Description]]
	         * @param   {[[Type]]} r [[Description]]
	         * @returns {[[Type]]} [[Description]]
	         */
	        this.roundRect = function (x, y, w, h, r) {
	            var c = this.ctx;
	            c.moveTo(x + r, y);
	            c.lineTo(x + w - r, y);
	            c.arc(x + w - r, y + r, r, Math.PI * 3 / 2, 0);
	            c.lineTo(x + w, y + h - r);
	            c.arc(x + w - r, y + h - r, r, Math.PI * 2, Math.PI * 1 / 2);
	            c.lineTo(x + r, y + h);
	            c.arc(x + r, y + h - r, r, Math.PI * 1 / 2, Math.PI);
	            c.lineTo(x, y + r);
	            c.arc(x + r, y + r, r, Math.PI, Math.PI * 3 / 2);
	            return this;
	        };

	        this.arc = function (x, y, r, sr, er) {
	            this.ctx.arc(x, y, r, sr || 0, er || Math.PI * 2);
	            return this;
	        };

	        this.map = function (tex, dx, dy, dw, dh, sx, sy, sw, sh) {
	            sx = sx || 0;
	            sy = sy || 0;
	            sw = sw || tex.w;
	            sh = sh || tex.h;

	            if (sw === 0 || sh === 0 || dh === 0 || dh === 0) {
	                return;
	            }

	            this.ctx.drawImage(tex.__data, sx >> 0, sy >> 0, sw >> 0, sh >> 0, dx >> 0, dy >> 0, dw >> 0, dh >> 0);
	            return this;
	        };
	    }

	    if (typeof module === "object" && typeof module.exports === "object") {
	        module.exports = Graphics;
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return Graphics;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	})();

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	    var core = __webpack_require__(2);
	    var DisplayContainer = __webpack_require__(6);
	    /**
	     * 
	     * @param {object} [data={] [[Description]]
	     */
	    var Scene = function (data) {
	        data = data || {};
	        DisplayContainer.call(this, data);
	    };

	    core.inherite(Scene, DisplayContainer);

	    /**
	     * 扩展
	     * @param {object} [data={] [[Description]]
	     */
	    core.ext(Scene.prototype, {
	        toString: function () {
	            return '{"x":"' + this.x + '","y":"' + this.y + '","w":"' + this.w + '","h":"' + this.h + '"}';
	        }

	    });

	    if (typeof module !== "undefine" && module.exports) {
	        module.exports = Scene;
	    } else {
	        defne(function () {
	            return Scene;
	        });
	    }
	})();

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	    var core = __webpack_require__(2);
	    var DisplayManager = __webpack_require__(7);
	    /**
	     * 
	     * @param {object} [data={] [[Description]]
	     */
	    var DisplayContainer = function (data) {
	        data = data || {};
	        DisplayManager.call(this, data);
	        this.parent = null;
	        this.children = [];
	    };
	    /**
	     * 扩展
	     * @param {object} [data={] [[Description]]
	     */
	    core.inherite(DisplayContainer, DisplayManager);
	    core.ext(DisplayContainer.prototype, {

	        add: function () {
	            for (var i = 0, len = arguments.length; i < len; i++) {
	                var child = arguments[i];
	                if (child.parent) continue;
	                this.children.push(child);
	                child.parent = this;
	                //if(this.parent){

	                child._transfromX = this.x;
	                child._transfromY = this.y;
	                // }
	            }
	            return this;
	        },
	        remove: function () {
	            for (var i = 0, len = arguments.length; i < len; i++) {
	                var child = arguments[i];
	                var index = this.children.indexOf(child);
	                if (index < 0) continue;
	                this.children.splice(index, 1);
	                child.parent = null;
	            }
	            return this;
	        },
	        find: function (filter, isloop) {
	            if (this.children.length === 0) return [];
	            var res = [];
	            if (isloop) {
	                !function (parent) {
	                    for (var i = 0, len = parent.children.length; i < len; i++) {
	                        var c = parent.children[i];
	                        if (filter(c)) {
	                            res.push(c);
	                        }
	                        if (c.children && c.children.length > 0) {
	                            arguments.callee(c);
	                        }
	                    }
	                }(this);
	            } else {
	                return this.children.filter(filter, this);
	            }
	        },
	        clear: function () {
	            for (var i = 0, len = this.children.length; i < len; i++) {
	                this.children[i].parent = null;
	            }
	            this.children = [];
	        }
	    });

	    if (typeof module !== "undefine" && module.exports) {
	        module.exports = DisplayContainer;
	    } else {
	        defne(function () {
	            return DisplayContainer;
	        });
	    }
	})();

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	    var core = __webpack_require__(2);
	    var RectAngel = __webpack_require__(8);
	    /**
	     * 
	     * @param {object} [data={] [[Description]]
	     */
	    var DisplayManager = function (data) {
	        data = data || {};
	        this.__seq = data.index || core._index;
	        this._roIndex = "ro_" + this.__seq;

	        this.name = data.name || this._roIndex;

	        this._visible = data.visible || true;
	        this._opacity = data.opacity || 1;
	        this.blendMode = data.blendMode || 'source-over';
	        this.x = data.x || 0;
	        this.y = data.y || 0;
	        this.w = data.w || 0;
	        this.h = data.h || 0;

	        this.originX = data.originX || 0;
	        this.originY = data.originY || 0;
	        this.skewX = data.skewX;
	        this.skewY = data.skewY;
	        this.scaleX = data.scaleX;
	        this.scaleY = data.scaleY;
	        this.rotateX = data.rotateX;
	        this.rotateY = data.rotateY;

	        this.bounds = data.bounds || new RectAngel(0, 0, this._w, this._h);

	        this._transfromX = data.transformX || 0;
	        this._transfromY = data.transformY || 0;

	        this._z = data.z || 0;
	        this.body = null;
	    };
	    /**
	     * 扩展
	     * @param {object} [data={] [[Description]]
	     */
	    core.ext(DisplayManager.prototype, {
	        toString: function () {
	            return '{"name":"' + this.name + '","roIndex":"' + this._roIndex + '"}';
	        },
	        updateTransform: function () {
	            var x = this.x;
	            var y = this.y;
	            this.originX = this._transfromX;
	            this.originY = this._transfromY;
	            // console.log(this)
	            return this;
	        },
	        moveBy: function (x, y) {
	            var a = x || 0;
	            var b = y || 0;
	            this.x += a;
	            this.y += b;
	            return this;
	        },
	        moveTo: function (x, y) {
	            var a = x || 0;
	            var b = y || 0;
	            this.x = a;
	            this.y = b;
	            return this;
	        },
	        originTo: function (x, y) {
	            var a = x || 0;
	            var b = y || 0;
	            this.originX += a;
	            this.originY += b;
	            return this;
	        },
	        originBy: function (x, y) {
	            var a = x || 0;
	            var b = y || 0;
	            this.originX = a;
	            this.originY = b;
	            return this;
	        },
	        opacityBy: function (o) {
	            var a = o || 0;
	            this.opacity += a;
	            if (this.opacity > 1) {
	                this.opacity = 1;
	            }
	            if (this.opacity < 0) {
	                this.opacity = 0;
	            }
	        },
	        opacityTo: function (o) {
	            var a = o || 0;
	            this._opacity = a;
	            if (this.opacity > 1) {
	                this.opacity = 1;
	            }
	            if (this.opacity < 0) {
	                this.opacity = 0;
	            }
	        },
	        skewBy: function (x, y) {
	            this.skewX += x;
	            this.skewY += y;
	            return this;
	        },
	        skewTo: function (x, y) {
	            this.skewX = x;
	            this.skewY = y;
	            return this;
	        },
	        rotateBy: function (x, y) {
	            this.rotateX += x;
	            this.rotateY += y;
	            return this;
	        },
	        rotateTo: function (x, y) {
	            this.rotateX = x;
	            this.rotateY = y;
	            return this;
	        },
	        scaleBy: function (x, y) {
	            this.scaleX += x;
	            this.scaleY += y;
	            return this;
	        },
	        scaleTo: function (x, y) {
	            this.scaleX = x;
	            this.scaleY = y;
	            return this;
	        }
	    });

	    if (typeof module !== "undefine" && module.exports) {
	        module.exports = DisplayManager;
	    } else {
	        defne(function () {
	            return DisplayManager;
	        });
	    }
	})();

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	    var core = __webpack_require__(2);
	    /**
	     * 
	     * @param {object} [data={] [[Description]]
	     */
	    var RectAngel = function (x, y, w, h) {
	        this.x = x;
	        this.y = y;
	        this.w = w;
	        this.h = h;
	    };
	    /**
	     * 扩展
	     * @param {object} [data={] [[Description]]
	     */
	    core.ext(RectAngel.prototype, {
	        toString: function () {
	            return '{"x":"' + this.x + '","y":"' + this.y + '","w":"' + this.w + '","h":"' + this.h + '"}';
	        },
	        clone: function () {
	            return new RectAngel(this.x, this.y, this.w, this.h);
	        },
	        getRight: function () {
	            return this.x + this.w;
	        },
	        getBottom: function () {
	            return this.y + this.h;
	        },
	        contain: function (x, y) {
	            if (this.x > x || this.x + this.w < x) return false;
	            if (this.y > x || this.y + this.h < y) return false;
	            return true;
	        }
	    });

	    if (typeof module !== "undefine" && module.exports) {
	        module.exports = RectAngel;
	    } else {
	        defne(function () {
	            return RectAngel;
	        });
	    }
	})();

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	    var core = __webpack_require__(2);
	    var Graphse = __webpack_require__(4);
	    /**
	     * 
	     * @param {object} [data={] [[Description]]
	     */
	    var RenderManager = function (data) {
	        data = data || {};

	        this.createCanvas = function (id, w, h, parent) {
	            var canvas = document.createElement("canvas");
	            canvas.id = id;
	            canvas.width = w;
	            canvas.height = h;
	            canvas.innerHTML = "not support canvas";
	            if (parent) {
	                parent.append(canvas);
	            } else {
	                document.body.appendChild(canvas);
	            }
	            return canvas;
	        };

	        var container = data.container || document.body;
	        var cvs = this.createCanvas(data.canvasid, data.w, data.h, data.container);
	        var ctx = cvs.getContext("2d");
	        var g = new Graphse(ctx);
	        this.getCanvas = function () {
	            return cvs;
	        };
	        var renderStyle = data.renderStyle || {};
	        this.isSort = false;
	        var self = this;
	        function render(cx, cs, rs, issort) {
	            if (!cs) {
	                return false;
	            }
	            ctx.clearRect(0, 0, cvs.width, cvs.height);
	            //ctx.save();
	            if (cs.children.length > 0) {
	                for (var i = 0, len = cs.children.length; i < len; i++) {
	                    //console.log(cs.children[i])
	                    if (cs.children[i].onRender) {
	                        ctx.save();
	                        ctx.translate(cs.children[i]._transfromX, cs.children[i]._transfromY);
	                        //console.log(cs.children[i])

	                        cs.children[i].onRender(cx);
	                    } else if (cs.children[i].children.length > 0) {
	                        renderChild(cs.children[i].children, cx);
	                    }
	                    ctx.restore();
	                }
	            }
	        }

	        function renderChild(child, cx) {
	            for (var i = 0, len = child.length; i < len; i++) {
	                //console.log(cs.children[i])
	                if (child[i].onRender) {
	                    //console.log(child[i]._transfromX,child[i]._transfromY);
	                    ctx.save();
	                    ctx.translate(child[i]._transfromX, child[i]._transfromY);
	                    child[i].onRender(cx);
	                    ctx.restore();
	                }
	                if (child[i].children.length > 0) {
	                    renderChild(child[i].children, cx);
	                }
	            }
	        }

	        this.render = function (scene) {
	            var cx = ctx,
	                cs = scene,
	                rs = renderStyle,
	                issort = this.isSort;
	            render(cx, cs, rs, issort);
	        };
	    };
	    /**
	     * 扩展
	     * @param {object} [data={] [[Description]]
	     */
	    core.ext(RenderManager.prototype, {
	        toString: function () {
	            return '{"x":"' + this.x + '","y":"' + this.y + '","w":"' + this.w + '","h":"' + this.h + '"}';
	        }

	    });

	    if (typeof module !== "undefine" && module.exports) {
	        module.exports = RenderManager;
	    } else {
	        defne(function () {
	            return RenderManager;
	        });
	    }
	})();

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {
	    var core = __webpack_require__(2);
	    var DisplayContainer = __webpack_require__(6);
	    var RenderManager = __webpack_require__(9);
	    /**
	     * 
	     * @param {object} [data={] [[Description]]
	     */
	    var Render = function (data) {
	        data = data || {};
	        DisplayContainer.call(this, data);
	        var self = this;
	        this.renderer = new RenderManager({
	            canvasid: data.id,
	            w: data.w,
	            h: data.h,
	            issort: data.issort,
	            container: data.container
	        });
	        var count = 0;
	        //console.log(this.renderer)
	        this.start = function (scene) {
	            run(function () {
	                //console.log(123)
	                self.renderer.render(scene);
	            });
	        };

	        var rafTag = null;
	        function run(fun) {

	            rafTag = requestAFrame(function (t) {
	                //console.log(t)
	                fun();
	                run(fun);
	            });
	        }
	    };

	    //core.inherite(Render,DisplayContainer);

	    /**
	     * 扩展
	     * @param {object} [data={] [[Description]]
	     */
	    core.ext(Render.prototype, {
	        toString: function () {
	            return '{"x":"' + this.x + '","y":"' + this.y + '","w":"' + this.w + '","h":"' + this.h + '"}';
	        }

	    });

	    if (typeof module !== "undefine" && module.exports) {
	        module.exports = Render;
	    } else {
	        defne(function () {
	            return Render;
	        });
	    }
	})();

/***/ },
/* 11 */
/***/ function(module, exports) {

	

/***/ }
]);